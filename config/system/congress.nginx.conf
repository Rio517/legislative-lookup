# this is where you define your mongrel clusters. 
# you need one of these blocks for each cluster
# and each one needs its own name to refer to it later.
upstream congress {
    server localhost:8003;
    server localhost:8001;
    server localhost:8002;
}

server {
  # port to listen on. Can also be set to an IP:PORT
  listen 80 default;

  # Set the max size for file uploads to 50Mb
  client_max_body_size 1M;

  
    # sets the domain[s] that this vhost server requests for
    server_name congress.mcommons.com;
  

  # doc root
  root /apps/congress/current/public;

  # vhost specific logs
  access_log /var/log/nginx/access.log  main;
  error_log  /var/log/nginx/error.log   notice;

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/system/maintenance.html) {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  # Block access to paths containing .svn 
  location ~* ^.*\.svn.*$ { 
    internal; 
  } 

  location / {
    index  index.html index.htm;
    # needed to forward user's IP address to rails
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_max_temp_file_size 0;

    location ~ ^/(images|javascripts|stylesheets)/ {
      expires 10y;
    }

    if (-f $request_filename) { 
      break; 
    }

    # check for index.html for directory index
    # if its there on the filesystem then rewite 
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }

    # this is the meat of the rails page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end 
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the 
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    if (!-f $request_filename) {
      proxy_pass http://congress;
      break;
    }
  }

  error_page   500 502 503 504  /500.html;
  location = /500.html {
    root /apps/congress/current/public;
  }
}

server {
  # port to listen on. Can also be set to an IP:PORT
  listen 443 default;

  # Set the max size for file uploads to 50Mb
  client_max_body_size 1M;


    ssl on;
    ssl_certificate /etc/nginx/godaddy/mcommons.crt; 
    ssl_certificate_key /etc/nginx/godaddy/mcommons.key;  



  # doc root
  root /apps/congress/current/public;

  # vhost specific logs
  access_log /var/log/nginx/access.log  main;
  error_log  /var/log/nginx/error.log   notice;

  # this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano's
  # disable web task
  if (-f $document_root/system/maintenance.html) {
    rewrite  ^(.*)$  /system/maintenance.html last;
    break;
  }

  # Block access to paths containing .svn 
  location ~* ^.*\.svn.*$ { 
    internal; 
  } 

  location / {
    index  index.html index.htm;
    # needed to forward user's IP address to rails
    proxy_set_header  X-Real-IP  $remote_addr;


      # rails looks for this header to see if the original request was https
      proxy_set_header X_FORWARDED_PROTO https;

    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_max_temp_file_size 0;

    location ~ ^/(images|javascripts|stylesheets)/ {
      expires 10y;
    }

    if (-f $request_filename) { 
      break; 
    }

    # check for index.html for directory index
    # if its there on the filesystem then rewite 
    # the url to add /index.html to the end of it
    # and then break to send it to the next config rules.
    if (-f $request_filename/index.html) {
      rewrite (.*) $1/index.html break;
    }

    # this is the meat of the rails page caching config
    # it adds .html to the end of the url and then checks
    # the filesystem for that file. If it exists, then we
    # rewite the url to have explicit .html on the end 
    # and then send it on its way to the next config rule.
    # if there is no file on the fs then it sets all the 
    # necessary headers and proxies to our upstream mongrels
    if (-f $request_filename.html) {
      rewrite (.*) $1.html break;
    }

    if (!-f $request_filename) {
      proxy_pass http://congress;
      break;
    }
  }

  error_page   500 502 503 504  /500.html;
  location = /500.html {
    root /apps/congress/current/public;
  }
}

